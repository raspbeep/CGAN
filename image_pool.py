import random
from copy import deepcopy

# an image pool buffer is used to store the last N images.
# when an image is generated by gen_c1 or gen_c2

# if the buffer has N images (full)
    # it is swapped for an arbitrary image and the old one from buffer is returned
# if the buffer is not full, just add the image into the buffer.

class ImagePool():
    def __init__(self, capacity):
        self.max_capacity = 50
        self.buffer = []

    def use(self, image):
        if len(self.buffer) < self.max_capacity:
            self.buffer.append(image)
            return image
        else:
            prob = random.uniform(0,0.5)
            if prob < 0.5:
                return image
            idx = random.randint(0, self.capacity - 1)
            tmp = deepcopy(self.buffer[idx])
            self.buffer[idx] = image
            return tmp
        